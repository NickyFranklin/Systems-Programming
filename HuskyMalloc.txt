Nodes are 32 bits + 32 bits + The pointer to the next load for linked list

9/7
Libraries use an archiver that make it easier to link
Object files contain defined and undefined global variables and functions
Linkers combine the object files and gives meaning to the symbols while creating the executables
There are symbol tables in obejct files
	The symbol table defines variables
Object modules are usually stored in ELF
Object Files are made up of:
HEader section: Sizes to parse object module and create the program
machine code
initialized data: Data that doesn't go on the stack (static and global)
symbol table: Defines symbols
relocation information: Records places where symbols are so that they can be placed where they need to go

File
nm
etc

Create load module and symbol table
Get next module

Object Module
	Insert code and data
		Relocate object module
		Undefined external references
		Defined external references
	Library
		Find each undefined ref in table
		see if symbol defined
		if so, load
	step 2
Static linking:
Fast, large executable, updates have to be recompiled

Dynamic Linking:
Slow, Small executable, no need to recompile as code is loaded independently

File Systems:
UNIX: Ordinary, Directory, Special, Symbolic Link, FIFO, Socket
Directories contain information on the files within
Maps symbolic file name into a file descriptor
writing a directory is done under strict system control
All directories start from / in linux
It is the root directory and is where the OS looks for files
Absolute vs Relative paths
You can hardcode a path or use .. and / to try to find files
Special Files:
Drivers, R/W IO, Makes physical devices seem to be apart of the file system
Linux boots into / directory
FIFO: First in, First out
FIFO is a type of pipe
The | in linux is an un named pipe
mkfifo [name]
Unix sys has 12 bits to specify protection
The bits are specified by the creator of the file
R is read, W is write, X is execute
(for ordinary files ^)
Sticky bits are no longer used for files
On directories, it allow all users to create files but only owners to delete
Each ISA provides instructions to call a function within a program
Function call instruction will jump to the functions starting point and the function will then return to where it was
Kernel can not use this instruction to get protected resources
We need to change security level as well by going to kernel mode
Open Kernal Call


